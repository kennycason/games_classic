	subttl	'Drawing and masking'
; vers. 1-17-83a
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                           		;;
;;                Drawing and Masking			;;
;;							;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; A font looks like:
;
; struct font {
;	char	width,			/* bytes wide */
;		height,			/* scanlines high */
;		bytes[width*height];	/* vector of source bytes */
; }
;
; In foreground drawing (DRAW), bytes are shifted right an appropriate
;  number of pixels, so as to align the left side of the font with
;  the X position passed to the pixel engine.  In background, the
;  amount of CPU bandwidth this shifting consumes is unacceptable, so
;  fonts are always aligned on byte boundaries.  Instead, three more
;  shifted fonts are created at powerup init time, and fractional-byte
;  horizontal addresses are simulated by using appropriate shifted fonts.
cldrw1	clc
	jsr	stamp
	ldx	#0
	stx	si
	bcc	draw1


;
	subttl	'Foreground drawing engine'
;
; CLDRAW - clear, then draw
; Passed: same as DRAW below
; This is simply an alternate entry point that first does a Clear() on
; the area of graphics memory about to be drawn into.
;
cldraw	jsr	clear
	bcc	draw1
	rts

;
; DRAW - pixel hacking for foreground
; Passed:
;	SRC -> source font
;	X = X position
;	Y = Y position
; Uses: all DRAW temps, tmp, AXY
; Imports: PFMSK[], ADDRL[], ADDRH[]
;
draw	local
	jsr	dsetup			; setup foreground draw stuff
	bcs	:r			; punt if err

draw1
:loop	dec	hei			; -- line count
	bmi	:r			; (punt if after last line)
	ldi	shbits,0		; zero shift-in bits
	mv	xi,xisav		; set X-index
	ldx	yi			; point DEST at graphics line
	tldx	dest,addr
	inc	yi			; ++ line number
	mv	tmp,rn			; tmp = byte count

:loop1	ldy	si			; get source byte
	lda	(src),y
	inc	si			; ++ source index
	pha				; save byte for later...

;
; Shift byte right SHCNT times
;
	ldx	shcnt			; X = shift count
	beq	:4			; (zero ==> don't shift)
:5	lsr	shbits			; shift saved bits
	ror	a			;   into top of accum.
	lsr	shbits			; do that again
	ror	a
	dex				; -- shift count
	bne	:5			; (more to do)

:4	sta	tmph			; save new pixels in tmph
	tax				; get the old-pixel mask
	lda	pfmsk,x
	ldy	xi			; and with byte in dest
	and	(dest),y
	ora	tmph			;  or with new pixels
	sta	(dest),y		;   and shove into graphics mem

	inc	xi			; ++ dest index

	pla				; get original source byte
	sta	shbits			; save away for next shift

	dec	tmp			; -- byte count
	bne	:loop1			; (more to do)

;
; Handle left-over bits on the right side of the font:
;
	ldy	shbits			; are there any?
	beq	:7			; (no)
	ldx	shcnt			; with shift==0, its impossible
	beq	:7			; (yes, its impossible....)
	lda	xi			; is there room?
	cmp	#bwide
	bge	:7			; (no, ran past 40 chars)

	tya
:6	asl	a			; align bits by shifting left
	asl	a
	inx
	cpx	#4
	blt	:6

	sta	tmph			; install pixels in display
	tax				;   get inverse pixel mask
	lda	pfmsk,x
	ldy	xi
	and	(dest),y		;   AND with destination pixels
	ora	tmph			;   OR our new pixels in
	sta	(dest),y		;   and put 'em in display mem

:7	clc				; si += rinc
	lda	rinc
	adc	si
	sta	si
	jmp	:loop

:r	rts
	subttl	'CLEAR graphics mem'
;
; CLEAR - clear a rectangle on the graphics screen
; Passed: X = x_position
;	  Y = y_position
; 	SRC -> bogus font (CLEAR just looks at x_size, y_size)
; Returns: nothing
; Uses: A, random (inconsequential) Draw() temps
;
clear	local
	jsr	dsetup			; setup Draw() parameters
	bcs	:r			; punt if err, or nothing to draw

;
; CLEAR falls thru to STAMP w/ CARRY=RESET

;
; STAMP - overwrite a rectangle ON BYTE BOUNDARY on the graphics screen
; Passed: all output variables from DSETUP
;	  CARRY: SET
; 	SRC -> bytes to overwrite
; Returns: preserves all output variables from DSETUP
; Uses: A, random (inconsequential) Draw() temps
stamp
	mv	tmph,hei
	mv	shbits,yi
	ldx	shcnt			; consult Right-Mask as to
	lda	:rmask,x		; which pixels to clobber
	sta	xi			; save mask in XI
	ldx	#0			; for indirect STORE w/ X


:loop	ldy	shbits			; point Dest at current scanline
	tldy	dest,addr
	inc	shbits			; ++ scanline number
	mv	tmp,rn			; tmp = horiz. count

;
; clear leading pixels
;
	lda	xi
	ldy	xisav
	and	(dest),y
	bcc	:cl1
	ora	(src,x)
	dinc	src
:cl1
	sta	(dest),y
	iny

;
; clobber middle pixels
;
	lda	#0
:2	dec	tmp			; -- count
	beq	:4			; punt if no more middle bytes
	bcc	:cl2
	lda	(src,x)
	dinc	src
:cl2
	sta	(dest),y		; zero some mem...
	iny
	jmp	:2			; uncond-->

;
; clear trailing pixels
;
:4
	lda	xi			;get mask
	beq	:cont			;0 means on byte boundary
	eor	#$ff
	and	(dest),y
	bcc	:cl3
	ora	(src,x)
	dinc	src
:cl3
	sta	(dest),y

;
; loop continuation
;
:cont	dec	tmph			; -- scanline count
	bne	:loop			; (more lines to clear)
:r	clc
	rts

;
; right masks
;
:rmask	db	%00000000,%11000000,%11110000,%11111100
;
; DSETUP - DRAW/CLEAR setup
; Passed: usual foreground draw stuff
; Returns: Cf set ==> error, so caller should punt
;
dsetup	local
	sty	yi			; save line#
	ldy	#0
	sty	rinc			; rinc = 0

	lda	(src),y			; get width count
	sta	rn
	iny
	lda	(src),y			; get height count
	sta	hei
	iny
	sty	si			; save source index

	cpx	#nwide			; X < 0?
	blt	:1			; (no)

;
; Hack left-hand clippage
;
	txa				; a = -x (2's comp)
	eor	#$ff
;tay
;iny
;tya
	lsr	a			; a = (a>>2) + 1
	lsr	a
	adc	#1

	sta	rinc			; rinc = a
	adc	si			; si += a
	sta	si
	jmp	:3			; rn -= a

;
; Check right-boundary
;
:1	txa				; a = (x>>2) + rn
	lsr	a
	lsr	a
	adc	rn
	cmp	#bwide+1		; a <= BWIDE?
	beq	:2			; (yes)
	blt	:2			; (yes)

;
; Hack right-hand clippage
;
	sbc	#bwide			; (carry already set here)
	sta	rinc			; rinc = offset
:3	sec				; rn -= offset
	lda	rn
	sbc	rinc
	sta	rn
	beq	:err			; punt if <=0 bytes wide...
	bmi	:err

;
; Setup for massive draw:
;
dsetu1
:2	txa				; xisav = x>>2
	lsr	a
	lsr	a
	sta	xisav
	txa				; shcnt = x & 3
	and	#3
	sta	shcnt

:r	clc				; no errs
	rts

:err	sec				; errs
	rts
	eject
;
; VDRAW - draw a creature in vblank
; Passed:
;	  X = x_position
;	  Y = y_position
;	VSRC -> source font
; Returns: nothing
; Imports: BWIDE, NWIDE, ADDRx
; Exports: nothing
; Uses: vdraw temps, vtmp[2]
;
vdraw	local
	sty	vyi			; save line number
	ldy	#0			; reset end-increment
	sty	vrinc

	lda	(vsrc),y		; get width count
	sta	vrn
	iny
	lda	(vsrc),y		; get hei count
	beq	:r			; punt if zero high
	sta	vhei			;  into VHEI counter
	iny
	sty	vsi			; init source vector index

;
; setup for draw
	txa				; vxisav = X>>2
	lsr	a
	lsr	a
	sta	vxisav			; save potential 2,3,4 wide X's
	tay
	iny
	sty	vzpsav
	iny
	sty	vzpsav+1
	iny
	sty	vzpsav+2

	cpx	#nwide + [$100 - nwide]/2 ; clip on left?
	blt	:1			; (no, clip on right)

;
; clip left side
;
	txa				; A = 1's comp(x) (= 2's comp-1)
	eor	#$ff
	lsr	a			; a >>= 2
	lsr	a
;	adc	#1			; a++ [A = #bytes off]
	sta	vrinc			; store byte offset in increment
	adc	vsi			; source_index += A
	sta	vsi
	jmp	:3

;
; Slow drawing routine
:slow
:lp
	lda	vxisav			; (3) set initial X-index
	sta	vxi			; (3)
	ldx	vrn			; (3) setup line count

:loop1	ldy	vsi			; (3) get source index
	lda	(vsrc),y		; (5) get source byte
	ldy	vxi			; (3) get dest index
	eor	(vdest),y		; (5) EOR with dest byte
	sta	(vdest),y		; (6) shove the mess back in
	inc	vsi			; (5) ++ src index
	inc	vxi			; (5) ++ dest index
	dex				; (2) -- byte count
	bne	:loop1			; (3) loop if not done
					; (37 total for inner loop)

	dec	vhei			; (5) -- line_count
	beq	:r			; (2) done-->

	clc				; (2) vsi += vrinc
	lda	vrinc			; (3)
	adc	vsi			; (3)
	sta	vsi			; (3)
	ldy	vyi			; (3) set scanline base addr
	lda	addrl,y			; (4) set low addr
	sta	vdest			; (3)
	cmp	#40			; (2) crossed page boundary?
	bcs	:skiph			; (3) no, skip high addr-->
	lda	addrh,y			; (4) set high addr
	sta	vdest+1			; (3)
:skiph
	inc	vyi			; (5) ++ line#
	bne	:lp			; (3) uncond-->

:r	rts
;
; clip right side
;
:1
	lda	vxisav			; A = (X+3) >> 2 + Vrn
	clc
	adc	vrn
	cmp	#bwide			; dest in range?
	blt	:2			; (yes)
	sec				; compute byte offset
	sbc	#bwide
	sta	vrinc

;
; VRN -= A
:3	sec
	sta	vtmp
	lda	vrn
	sbc	vtmp
	sta	vrn
	bmi	:r
	beq	:r

;
; Which draw rtn to use?
:2
	ldx	vyi			; (3) set scanline base addr
	lda	addrl,x			; (4) set low addr
	sta	vdest			; (3)
	lda	addrh,x			; (4) set high addr
	sta	vdest+1			; (3)
	inc	vyi			; (5) ++ line#
	lda	vrinc
	bne	:slow			; use slow one if need clipping

;
; switch(vrn): use eor2w, eor3w, eor4w, or lose and use :slow()
;
	ldx	vrn
	dex
	dex
	beq	eor2w
	dex
	beq	eor3w
	dex
	bne	:slow			; default = slow
	subttl	'Pixel: EOR-4'
;
; EOR-in, 4 bytes wide
eor4w
	inx				; =1, for 4 bytes wide
eor2w					; =0, for 2 bytes wide

:loop

	ldy	vsi			; (3) get src index
	lda	(vsrc),y		; (5) get src byte
	inc	vsi			; (5) ++src index
	ldy	vxisav			; (3) get dest index
	eor	(vdest),y		; (5) EOR with display mem
	sta	(vdest),y		; (6) shove the mess back in

	ldy	vsi			; (3) get 2nd src index
	lda	(vsrc),y		; (5) get 2nd src byte
	inc	vsi			; (5) ++src index
	ldy	vzpsav			; (3) get 2nd dest index
	eor	(vdest),y		; (5) EOR with display mem
	sta	(vdest),y		; (6) shove the mess back in

	txa				; set status bits, 2 bytes wide?
	beq	:next			; yes-->

	ldy	vsi			; (3) get 3rd src index
	lda	(vsrc),y		; (5) get 3rd src byte
	inc	vsi			; (5) ++src index
	ldy	vzpsav+1		; (3) get 3rd dest index
	eor	(vdest),y		; (5) EOR with display byte
	sta	(vdest),y		; (6) show the world

	txa				; set status bits, 3 bytes wide?
	bmi	:next			; yes-->
	
	ldy	vsi			; (3) get 4th src index
	lda	(vsrc),y		; (5) get 4th src byte
	ldy	vzpsav+2		; (3) get 4th dest index
	eor	(vdest),y		; (5) EOR with display byte
	sta	(vdest),y		; (6) show the world
	inc	vsi			; (5) ++src index
					; (113 total)

:next
	dec	vhei			; (5) --hei count
	beq	:r			; (2) punt if done-->
	ldy	vyi			; (3) setup for scanline#
	lda	addrl,y			; (4) get lsb of addr
	sta	vdest			; (3) into ADDRL
	cmp	#40			; (2) cross page boundary?
	bcs	:skip1			; (3) no, skip high addr-->
	lda	addrh,y			; (4) get msb of addr
	sta	vdest+1			; (3)  into ADDRH
:skip1
	inc	vyi			; (5) ++scanline#
	bne	:loop			; (3) uncond-->
					; (33 total)
eor3w
	dex				; X < 0, for 3 bytes wide
	bne	:loop			; uncond-->
	subttl	'Letter Stamping'
;
; PUTS1 - alternate entry point to PUTS
; Passed: X,Y -> string to print (X = Msb)
; Otherwise: same as PUTS
;
puts1	stx	tmp1h
	sty	tmp1

;
; PUTS - print a string
; Passed: tmp1 -> source string, XY = x,y position
; Uses: DRAW temps, AXY, tmp1, tmp2
; Imports: EOL, NL, PSXY, FNUM0
;
; Method:
; PUTS prints a string.  On entry, TMP1 points to the start of the
; string, and the X and Y registers contain the starting position on
; the screen.  Puts will pick up font numbers and print them left to
; right.  There are some special codes that can be used to draw
; arbitrary fonts, and to change position on the screen:
;
;	PSXY <x_position> <y_position>
;		next fonts are drawn at the given coordinate
;
;	PSQUOTE <pointer>
;		draw the font pointed to by the pointer
;
;	EOL
;		end of line: terminate string and return
;
; The fonts for letters are NOT Ascii or Atascii, but correspond to
; entries in the table for letter fonts.
;
puts	local
	stx	tmp2			; save X,Y position
	sty	tmp2h

:1	ldy	#0			; get next char
	lda	(tmp1),y
	iny
	cmp	#eol			; end of string?
	beq	:r			; (yes)

	cmp	#psxy			; cursor addressing?
	bne	:2			; (no)
	lda	(tmp1),y		; get new X
	sta	tmp2
	iny
	lda	(tmp1),y		; get new Y
	sta	tmp2h
	iny
	bne	:i			; adjust pointer & continue [uncond]

:2	cmp	#psquote		; quote-a-font?
	bne	:4
	lda	(tmp1),y		; get low byte
	sta	src
	iny
	lda	(tmp1),y		; get high byte
	sta	src+1
	ldx	tmp2
	ldy	tmp2h
	jsr	cldraw			; clear, then draw the thing...
	ldy	#3
	bne	:i			; [uncond]

;
; print a char
;
:4	jsr	putc1
	ldy	#1			; setup for tmp1++

;
; tmp1 += y
;
:i	tya
	clc
	adc	tmp1
	sta	tmp1
	bcc	:1			; (if no carry)
	inc	tmp1h			; ++ Msb
	bne	:1			; [uncond]
:r	rts


;
; PUTC - print a char
; Passed: A = char
;	  X,Y = x,y position
; Returns: X, Y = X+4, Y
; Uses: tmp2, Draw temps, AXY
;
putc
	stx	tmp2
	sty	tmp2h

putc1
	ldy	#6
putmr
	sty	hei
	ldy	tmp2h
	sty	yi
	ldy	#1
	sty	rn

	ldx	#high fnum0		; src = A<<3 + fnum0
	asl	a
	sta	src			; src = A<<1
	asl	a			; CARRY cleared via shift
	adc	src			; 2x + 4x = 6x
:noc1	adc	#low fnum0		; CARRY is still cleared
	bcc	:noc2
	inx
:noc2	sta	src
	stx	src+1
	ldx	tmp2			; argument for dsetu1
	jsr	dsetu1			; get SHCNT & XISAV
	jsr	cldrw1			; do clear draw w/o dsetup
	clc				; X += 4
	lda	tmp2
	adc	#4
	tax
	stx	tmp2
	ldy	tmp2h
	rts
