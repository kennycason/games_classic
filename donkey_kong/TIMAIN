	eject
	title	'Donkey Kong  Sun Mar 13, 1983'
;
; Files used for Donkey-Kong are:
; (They get appended to the end of this file by Amac)
;

	link	d:play		; top level PLAY module, foreground
	link	d:kong		; Driver code for Kong
	link	d:vbh		; vblank driver


	if	false

	link	d:test		; testing code
	link	d:spawn		; foreground spawning stuff
	link	d:dli		; DLI handlers
	link	d:snd		; sound drivers
	link	d:cartun	; cartoon drivers
	link	d:sched		; critter update scheduler
	link	d:crit		; critter common code
	link	d:bar		; barrels
	link	d:fb		; fireballs, firefoxen
	link	d:spr		; spring animation
	link	d:sand		; sandpiles
	link	d:prot1		; Mario
	link	d:prot2		; Mario, continued.
	link	d:rmriv		; Rivet removal
	link	d:elev		; Elevator platform update
	link	d:anim		; Random animation (explosions, etc.)
	link	d:collis	; Collision detection


	endif

	link	d:draw		; pixel engines
	link	d:scrgen	; screen generation
	link	d:misc		; cruft

	if	false

	link	d:altorg	; *** ORG for 16K overflow ***
	link	d:sndtbl	; sound tables

	endif

	link	d:fonts		; cute bit-maps

	if	false

	link	d:mario.fnt	; fonts for Mario, Hammer
	link	d:kong.fnt	; Kong fonts
	link	d:lady.fnt	; playfield for Lady
	link	d:fbarrel.fnt	; falling barrel fonts
	link	d:kickdata.fnt	; Lady kicking fonts

	endif

	link	d:barrel.fnt	; rolling barrel fonts
	link	d:fthings.fnt	; Fire-thingies (fireballs, firefoxen)
	link	d:end		; wraps everything up
	eject
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                   ;;
;;			    D O N K E Y                              ;;
;;			      K O N G				     ;;
;;								     ;;
;;                                                                   ;;
;; Design, coding & screaming: Landon Dyer			     ;;
;; Firefighting and moral support: Vince Wu			     ;;
;; Graphics artwork: Mona Lundstrom				     ;;
;; Sound tables: Brad Fuller					     ;;
;;                                                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;		I have desired to go
;		  Where springs not fail,
;		To fields where flies no sharp and sided hail
;		  And a few lilies blow.
;
;		And I have asked to be
;		  Where no storms come,
;		Where the green swell is in the haven's dumb
;		  And out of the swing of the sea.
;
;			-- Gerard Manley Hopkins
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	Gotta admit, that I'm a little bit confused,
;	Sometimes it seems to me, like I'm just being used,
;	Got to stay awake, have to try and shake off,
;	This creeping malaise,
;	If I can't find my own ground, how can I find my way
;	   out of this maze?
;
;	Deaf, dumb and blind, you just keep on pretending,
;	That everyone's expendable, and no-one has a real friend,
;	And it seems to you the thing to do,
;	Would be to isolate the winner,
;	Everything's done under the sun,
;	And you believe in your heart that everyone's a HACKER...
;
;				- Pink Floyd
;				  Animals
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	eject
	list	i		; (lets list includes, too)
	include	d:glob		; get global defs
	eject
	org	codbas		; This is a good place to start....
	if	debug		; an easy entry point to remember
	jmp	main
	endif
	include	d:tables	; put tables at start
	subttl	'Main - top level driver'
rts	rts
	include	d:log.tmp
;
; MAIN - initialization and top-level
;	Passed: control by OS
;	Returns: never
;	Calls: just about everything
;
	proc
main
	if	[def dbug]		; init DBUG if its installed
	jsr	dbugi
	jsr	dbug
	endif

;
; Pokey init (once only)
;
	lda	#3
	sta	skctl		; enable only keyscan and debounce
	sta	sskctl
	lda	#0		; clobber everything in AUDCTL
	sta	audctl

;
; Clear zero-page locs
;
	ldx	#0
	txa				; zero upper half of zero-page
:3	sta	zpbase,x
	inx
	bpl	:3

;
; clear zeroed_global area
;
	ldx	#globlen-1
:4	sta	glob,x
	dex
	bpl	:4

	jsr	sndoff			; turn off sounds

;
; init globals: shadows and some hardware registers
;
	dec	keydb			; init debounce counter
	dldi	sdlstl,nulldl		; point at null Dlist for now
	ldi	sdmctl,$3e		; enable PM DMA, et al
	ldi	gractl,3		; turn on players and missiles
	ldi	gprior,%00110001	; setup graphics priority
	ldi	pmbase,high pmb		; setup player/missile base

	if	debug
	ldi	snmien,$40
	else
	ldi	snmien,$c0		; enable DLIs, set fake NMIEN shadow
	endif

	ldi	pokmsk,%01000000	; enable only keyboard IRQs
	sta	irqen
	dldi	vkeybd,kbdint		; setup keyboard intr vector
;	dldi	titp,title

	ldx	#8			; setup color shadows
:2	lda	colors,x
	sta	pcolr0,x
	dex
	bpl	:2

;
; Setup the display address tables.
; Starting at a 4K-boundary plus $100 avoids
; having to do an offsetted reload instruction for the /first/ 4K boundary.  Since
; DK only uses 198 scanlines, the code that generates the addr table
; doesn't have to check for crossing a 4K boundary
;
	local
	dldi	tmp,gbase
	ldx	#0
:1	lda	tmp			; install this line's addr
	sta	addrl,x
	lda	tmph
	sta	addrh,x
	dadi	tmp,bwide		; next line, please
	inx
	cpx	#nlines			; at end of dlist?
	blt	:1

;
; Fill up the rest of the display address table with pointers to garbage.
; (This is so clipping is done properly at the top and bottom of the
;  screen).
;
; NB: This could also point into the cartridge space, as one facet of
;     copy protection.  That way, DRAWs clipping on the top or bottom
;     of the screen will attempt to store into cartridge mem....
;
:3	lda	#low garbage
	sta	addrl,x
	lda	#high garbage
	sta	addrh,x
	inx
	bne	:3

;
; Setup the playfield mask table
; PFMSK contains a '00' bit pair if the index into the table contains
;  a '01', '10' or '11' bit pair, for each of the four pairs in a byte.
; This mask table is used to extract pixels, by appropriate ANDing
;  and EORing source and destination bytes.
;
	local
	ldx	#0
:1	txa				; get current table index
	asl	a			; Shift up and mask bits
	and	#$aa
	sta	tmp
	txa				; Shift down and mask bits
	lsr	a
	and	#$55
	ora	tmp			; Or-in to shifted up bits
	sta	tmp
	txa
	ora	tmp			; Or-in original bits,
	eor	#$ff			;  complement them,
	sta	pfmsk,x			;   and save in mask table
	dex
	bne	:1

;
; Generate REVMSK
; A REVMSK entry contains the bitwise mirror-image of the entry's index
; into the table.  (i.e. an index of %11010000 points to a byte with the
; value %00001011.)
;
:rev	txa				; get current byte
	ldy	#7			; Y = bit count
:rev1	lsr	a			; rotate LSB into LSB of dest
	rol	tmp
	dey				; -- bit count
	bpl	:rev1
	lda	tmp			; store mirror_image into table
	sta	revmsk,x
	dex				; next byte, please
	bne	:rev			; (more bytes to mirror)

;
; install immediate vertical-blank interrupt vector
;
	lda	#immvbl			; setup immediate VBL vector
	ldx	#high vbh
	ldy	#low vbh
	jsr	setvbv

;
; put up once-only title screen
; for about 4 seconds
;
	jsr	gentitl			; generate title graphics
	ldi	kongx,[nwide/2]-12
	ldi	kongy,[nlines/2]-16
	lda	#khe+khtyp+rarme+larme+larmt+%11
	jsr	pckong
	ldxy	copyrt			; print copyright message
	jsr	puts1
	jsr	dlon			; turn on the display

	ldx	rtclok+2		; wait for 254 jiffies
	dex
:wait	cpx	rtclok+2
	bne	:wait

;
; Generate the setup-screen
; Hack console switches:
;	OPTION selects game difficulty
;	SELECT selects the number of players
;	START starts up the game (so do joystick buttons)
;
setup	local
	jsr	gentitl			; generate title screen
	ldxy	:str			; print invariant text
	jsr	puts1

	lda	usr			; ensure player-1 is current user
	beq	:1
	jsr	swap

:1	dldi	tmp1,cscore		; print player-1's score
	ldx	#4			;  at (4,7)
	ldy	#7
	lda	#6
	jsr	putscor

	dldi	tmp1,hscore		; print current high-score
	ldx	#68			;  at (68,7)
	ldy	#7
	lda	#6
	jsr	putscor

	jsr	:token			; print token for current difficulty level
	jsr	dlon			; turn on the display
	jmp	:2nd			; setup ONE/TWO lettering and 2nd player's score

;
; main setup loop:
;
:loop	lda	strig0			; if any trigger down, then startup the game...
	and	strig1
	beq	:play
	jsr	dconsw			; get debounced console switches
	cmp	#7
	beq	:loop

	tay				; (and save 'em in Y)
	and	#SWSTRT			; [START] key down?
	bne	:2
:play	jsr	play			; play a game...
	jmp	setup			; and show the setup screen again

:2	sta	atract			; reset atract color-shifting
	tya
	and	#SWOPT			; [OPTION] button down?
	bne	:3

;
; change current difficulty level
;
	jsr	:token			; erase current token
	inc	diff			; ++ difficulty
	lda	diff			; wraparound back to zero?
	cmp	#5
	blt	:4
	ldi	diff,0			; reset difficulty
:4	jsr	:token			; show new token
	jmp	:loop			; get another key...

;
; change number of players
;
:3	lda	nplyrs			; nplyrs = nplyrs EOR 1
	eor	#1
	sta	nplyrs

;
; refresh graphics to reflect number of players
;
:2nd	lda	nplyrs
	bne	:5			; (from one player to two)
	ldxy	:erase			; erase 2nd player's score (from two players to one)
	bne	:6			; [uncond]

:5	dldi	tmp1,[cscore+usrlen]	; print 2nd player's score
	ldx	#132			;  at (132,7)
	ldy	#7
	lda	#6
	jsr	putscor
	ldxy	:2up			; print '2UP' above the score
:6	jsr	puts1
	jmp	:loop

;
; EOR the token indicating the current level of difficulty
; into an out of existence
;
:token	ldx	diff
	tldx	vsrc,:tok		; vsrc -> token font
	ldx	#74			; draw at (74,95)
	ldy	#95
	jmp	vdraw

;
; tokens to display for difficulty level:
;	(easiest) 0	- barrel (side view)
;		  1	- fireball
;		  2	- spring
;		  3	- sandpile
;	(hardest) 4	- hammer
;
:tokl	db	low fnbar0
	db	low fnfib0
	db	low fnspr0
	db	low fnsan0
	db	low pfham

:tokh	db	high fnbar0
	db	high fnfib0
	db	high fnspr0
	db	high fnsan0
	db	high pfham


;
; string to erase 2nd player's score and install 'TWO' in text body
;
:erase	db	psxy,140,0		; clobber '2UP' and score
	db	10,10,10
	db	psxy,132,7
	db	10,10,10,10,10,10
	db	psxy,84,80
	db	30,33,25		; 'TWO'
	db	eol

;
; string to draw the '2UP' and 'ONE' for the second player's score
;
:2up	db	psxy,140,0
	db	2,31,26			; '2UP'
	db	psxy,84,80
	db	25,24,15		; 'ONE'
	db	eol

;
; string to draw most of the static text on the setup screen,
; excepting the copyright message (which is shared with the
; title screen.)
;
:str	db	psxy,16,0
	db	1,31,26			; '1UP'
	db	psxy,64,0
	db	18,19,10,29,13,25,28,15	; 'HI SCORE'

	db	psxy,16,80
	db	26,28,15,29,29,10	; 'PRESS '
	db	29,15,22,15,13,30,10	; 'SELECT '
	db	16,25,28,10,10,10,10,10	; 'FOR     '
	db	26,22,11,35,15,28,10	; 'PLAYER '
	db	17,11,23,15		; 'GAME'

	db	psxy,18,120
	db	26,28,15,29,29,10	; 'PRESS '
	db	25,26,30,19,25,24,10	; 'OPTION '
	db	30,25,10,26,19,13,21,10	; 'TO PICK '
	db	14,19,16,16,19,13,31,22,30,35	; 'DIFFICULTY'

	db	psxy,42,135
	db	26,28,15,29,29,10	; 'PRESS '
	db	29,30,11,28,30,10	; 'START '
	db	30,25,10,26,22,11,35	; 'TO PLAY'
	db	eol
	eject
;
; GENTIT - generate title graphics
; Passed: nothing
; Returns: nothing
; Uses: AXY, tmp*, draw temps
; Notes:
;	Reconstructs display memory and draws the "DONKEY KONG" title
;	graphics.  Returns with the display DISABLED; DLON must be
;	used to turn on the screen.
;
gentit	local
	jsr	remake			; re-init screen memory and display-list stuff
	dldi	src,:block		; src -> brick to make title letters out of
	ldi	tmp2,0			; tmp2 = title bitmap index
	ldi	tmp1,10			; tmp1 = title line count
	ldi	tmp3,25			; tmp3 = y_position

:loop	ldi	tmp1h,3			; tmp1h = byte count
	ldi	tmp2h,30		; tmp2h = x_position

:loop1	ldi	tmp3h,7			; tmp3h = shift_count
	ldy	tmp2			; tmp4 = :str[tmp2++]
	lda	title,y		; get byte from title bitmap
	sta	tmp4
	inc	tmp2

:loop2	asl	tmp4			; check a bit...
	bcc	:1			; leave a blank spot

	ldx	tmp2h			; draw a brick here...
	ldy	tmp3
	jsr	draw

:1	clc				; tmp2h += 4
	lda	tmp2h
	adc	#4
	sta	tmp2h

	dec	tmp3h			; -- shift count
	bpl	:loop2
	dec	tmp1h			; -- byte count
	bpl	:loop1

	clc				; tmp3 += 4
	lda	tmp3
	adc	#4
	sta	tmp3
	dec	tmp1			; -- line count
	bpl	:loop
	rts


;
; bitmap for "DONKEY/KONG" title
; the above code is wired for:
;	4 bytes wide,
;	11 lines high
; a brick gets drawn for every '1' bit here
;
title
	db	%11001110, %10010100, %10111010, %10000000
	db	%10101010, %11010101, %00100010, %10000000
	db	%10101010, %11110111, %00111011, %10000000
	db	%10101010, %10110101, %00100001, %00000000
	db	%11001110, %10010100, %10111001, %00000000
	db	%00000000, %00000000, %00000000, %00000000
	db	%00011010, %11110100, %10011100, %00000000
	db	%00011010, %11010110, %10110000, %00000000
	db	%00011100, %11010111, %10110000, %00000000
	db	%00011010, %11010101, %10110100, %00000000
	db	%00011010, %11110100, %10011100, %00000000

;
; What the title is made out of (a "brick", I guess)
;
:block	db	1,4
	db	%11111111
	db	%10000010
	db	%10000010
	db	%10101010


;
; This is the copyright message
;
copyrt	db	psxy,64,147
	db	1,9,8,3,10,11,30,11,28,19	; '1983 ATARI'
	db	psxy,48,160
	db	1,9,8,1,10,1,9,8,3,10		; '1981 1983 '
	db	24,19,24,30,15,24,14,25		; 'NINTENDO'
	db	psxy,56,147,psquote
	dw	copysym				; "(C)"
	db	psxy,40,160,psquote
	dw	copysym				; "(C)"
	db	eol


;
; The copyright symbol (" (C) ")
;
copysym	db	2,7
	db	%00000101, %01000000
	db	%00010000, %00010000
	db	%01001010, %10000100
	db	%01001000, %00000100
	db	%01001010, %10000100
	db	%00010000, %00010000
	db	%00000101, %01000000


;
; Jump-indirect through TMP.  Usually used to fake an indirect JSR
;
jtmp	jmp	(tmp)
